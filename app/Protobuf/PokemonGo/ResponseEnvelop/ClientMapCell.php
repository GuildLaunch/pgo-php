<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : pokemongo.proto
 */


namespace Protobuf\PokemonGo\ResponseEnvelop;

/**
 * Protobuf message : pokemongo.ResponseEnvelop.ClientMapCell
 */
class ClientMapCell extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * S2CellId required uint64 = 1
     *
     * @var int
     */
    protected $S2CellId = null;

    /**
     * AsOfTimeMs required int64 = 2
     *
     * @var int
     */
    protected $AsOfTimeMs = null;

    /**
     * Fort repeated message = 3
     *
     * @var \Protobuf\Collection<\Protobuf\PokemonGo\ResponseEnvelop\PokemonFortProto>
     */
    protected $Fort = null;

    /**
     * SpawnPoint repeated message = 4
     *
     * @var \Protobuf\Collection<\Protobuf\PokemonGo\ResponseEnvelop\ClientSpawnPointProto>
     */
    protected $SpawnPoint = null;

    /**
     * WildPokemon repeated message = 5
     *
     * @var \Protobuf\Collection<\Protobuf\PokemonGo\ResponseEnvelop\WildPokemonProto>
     */
    protected $WildPokemon = null;

    /**
     * IsTruncatedList optional bool = 7
     *
     * @var bool
     */
    protected $IsTruncatedList = null;

    /**
     * FortSummary repeated message = 8
     *
     * @var \Protobuf\Collection<\Protobuf\PokemonGo\ResponseEnvelop\PokemonSummaryFortProto>
     */
    protected $FortSummary = null;

    /**
     * DecimatedSpawnPoint repeated message = 9
     *
     * @var \Protobuf\Collection<\Protobuf\PokemonGo\ResponseEnvelop\ClientSpawnPointProto>
     */
    protected $DecimatedSpawnPoint = null;

    /**
     * MapPokemon repeated message = 10
     *
     * @var \Protobuf\Collection<\Protobuf\PokemonGo\ResponseEnvelop\MapPokemonProto>
     */
    protected $MapPokemon = null;

    /**
     * NearbyPokemon repeated message = 11
     *
     * @var \Protobuf\Collection<\Protobuf\PokemonGo\ResponseEnvelop\NearbyPokemonProto>
     */
    protected $NearbyPokemon = null;

    /**
     * Check if 'S2CellId' has a value
     *
     * @return bool
     */
    public function hasS2CellId()
    {
        return $this->S2CellId !== null;
    }

    /**
     * Get 'S2CellId' value
     *
     * @return int
     */
    public function getS2CellId()
    {
        return $this->S2CellId;
    }

    /**
     * Set 'S2CellId' value
     *
     * @param int $value
     */
    public function setS2CellId($value)
    {
        $this->S2CellId = $value;
    }

    /**
     * Check if 'AsOfTimeMs' has a value
     *
     * @return bool
     */
    public function hasAsOfTimeMs()
    {
        return $this->AsOfTimeMs !== null;
    }

    /**
     * Get 'AsOfTimeMs' value
     *
     * @return int
     */
    public function getAsOfTimeMs()
    {
        return $this->AsOfTimeMs;
    }

    /**
     * Set 'AsOfTimeMs' value
     *
     * @param int $value
     */
    public function setAsOfTimeMs($value)
    {
        $this->AsOfTimeMs = $value;
    }

    /**
     * Check if 'Fort' has a value
     *
     * @return bool
     */
    public function hasFortList()
    {
        return $this->Fort !== null;
    }

    /**
     * Get 'Fort' value
     *
     * @return \Protobuf\Collection<\Protobuf\PokemonGo\ResponseEnvelop\PokemonFortProto>
     */
    public function getFortList()
    {
        return $this->Fort;
    }

    /**
     * Set 'Fort' value
     *
     * @param \Protobuf\Collection<\Protobuf\PokemonGo\ResponseEnvelop\PokemonFortProto> $value
     */
    public function setFortList(\Protobuf\Collection $value = null)
    {
        $this->Fort = $value;
    }

    /**
     * Add a new element to 'Fort'
     *
     * @param \Protobuf\PokemonGo\ResponseEnvelop\PokemonFortProto $value
     */
    public function addFort(\Protobuf\PokemonGo\ResponseEnvelop\PokemonFortProto $value)
    {
        if ($this->Fort === null) {
            $this->Fort = new \Protobuf\MessageCollection();
        }

        $this->Fort->add($value);
    }

    /**
     * Check if 'SpawnPoint' has a value
     *
     * @return bool
     */
    public function hasSpawnPointList()
    {
        return $this->SpawnPoint !== null;
    }

    /**
     * Get 'SpawnPoint' value
     *
     * @return \Protobuf\Collection<\Protobuf\PokemonGo\ResponseEnvelop\ClientSpawnPointProto>
     */
    public function getSpawnPointList()
    {
        return $this->SpawnPoint;
    }

    /**
     * Set 'SpawnPoint' value
     *
     * @param \Protobuf\Collection<\Protobuf\PokemonGo\ResponseEnvelop\ClientSpawnPointProto> $value
     */
    public function setSpawnPointList(\Protobuf\Collection $value = null)
    {
        $this->SpawnPoint = $value;
    }

    /**
     * Add a new element to 'SpawnPoint'
     *
     * @param \Protobuf\PokemonGo\ResponseEnvelop\ClientSpawnPointProto $value
     */
    public function addSpawnPoint(\Protobuf\PokemonGo\ResponseEnvelop\ClientSpawnPointProto $value)
    {
        if ($this->SpawnPoint === null) {
            $this->SpawnPoint = new \Protobuf\MessageCollection();
        }

        $this->SpawnPoint->add($value);
    }

    /**
     * Check if 'WildPokemon' has a value
     *
     * @return bool
     */
    public function hasWildPokemonList()
    {
        return $this->WildPokemon !== null;
    }

    /**
     * Get 'WildPokemon' value
     *
     * @return \Protobuf\Collection<\Protobuf\PokemonGo\ResponseEnvelop\WildPokemonProto>
     */
    public function getWildPokemonList()
    {
        return $this->WildPokemon;
    }

    /**
     * Set 'WildPokemon' value
     *
     * @param \Protobuf\Collection<\Protobuf\PokemonGo\ResponseEnvelop\WildPokemonProto> $value
     */
    public function setWildPokemonList(\Protobuf\Collection $value = null)
    {
        $this->WildPokemon = $value;
    }

    /**
     * Add a new element to 'WildPokemon'
     *
     * @param \Protobuf\PokemonGo\ResponseEnvelop\WildPokemonProto $value
     */
    public function addWildPokemon(\Protobuf\PokemonGo\ResponseEnvelop\WildPokemonProto $value)
    {
        if ($this->WildPokemon === null) {
            $this->WildPokemon = new \Protobuf\MessageCollection();
        }

        $this->WildPokemon->add($value);
    }

    /**
     * Check if 'IsTruncatedList' has a value
     *
     * @return bool
     */
    public function hasIsTruncatedList()
    {
        return $this->IsTruncatedList !== null;
    }

    /**
     * Get 'IsTruncatedList' value
     *
     * @return bool
     */
    public function getIsTruncatedList()
    {
        return $this->IsTruncatedList;
    }

    /**
     * Set 'IsTruncatedList' value
     *
     * @param bool $value
     */
    public function setIsTruncatedList($value = null)
    {
        $this->IsTruncatedList = $value;
    }

    /**
     * Check if 'FortSummary' has a value
     *
     * @return bool
     */
    public function hasFortSummaryList()
    {
        return $this->FortSummary !== null;
    }

    /**
     * Get 'FortSummary' value
     *
     * @return \Protobuf\Collection<\Protobuf\PokemonGo\ResponseEnvelop\PokemonSummaryFortProto>
     */
    public function getFortSummaryList()
    {
        return $this->FortSummary;
    }

    /**
     * Set 'FortSummary' value
     *
     * @param \Protobuf\Collection<\Protobuf\PokemonGo\ResponseEnvelop\PokemonSummaryFortProto> $value
     */
    public function setFortSummaryList(\Protobuf\Collection $value = null)
    {
        $this->FortSummary = $value;
    }

    /**
     * Add a new element to 'FortSummary'
     *
     * @param \Protobuf\PokemonGo\ResponseEnvelop\PokemonSummaryFortProto $value
     */
    public function addFortSummary(\Protobuf\PokemonGo\ResponseEnvelop\PokemonSummaryFortProto $value)
    {
        if ($this->FortSummary === null) {
            $this->FortSummary = new \Protobuf\MessageCollection();
        }

        $this->FortSummary->add($value);
    }

    /**
     * Check if 'DecimatedSpawnPoint' has a value
     *
     * @return bool
     */
    public function hasDecimatedSpawnPointList()
    {
        return $this->DecimatedSpawnPoint !== null;
    }

    /**
     * Get 'DecimatedSpawnPoint' value
     *
     * @return \Protobuf\Collection<\Protobuf\PokemonGo\ResponseEnvelop\ClientSpawnPointProto>
     */
    public function getDecimatedSpawnPointList()
    {
        return $this->DecimatedSpawnPoint;
    }

    /**
     * Set 'DecimatedSpawnPoint' value
     *
     * @param \Protobuf\Collection<\Protobuf\PokemonGo\ResponseEnvelop\ClientSpawnPointProto> $value
     */
    public function setDecimatedSpawnPointList(\Protobuf\Collection $value = null)
    {
        $this->DecimatedSpawnPoint = $value;
    }

    /**
     * Add a new element to 'DecimatedSpawnPoint'
     *
     * @param \Protobuf\PokemonGo\ResponseEnvelop\ClientSpawnPointProto $value
     */
    public function addDecimatedSpawnPoint(\Protobuf\PokemonGo\ResponseEnvelop\ClientSpawnPointProto $value)
    {
        if ($this->DecimatedSpawnPoint === null) {
            $this->DecimatedSpawnPoint = new \Protobuf\MessageCollection();
        }

        $this->DecimatedSpawnPoint->add($value);
    }

    /**
     * Check if 'MapPokemon' has a value
     *
     * @return bool
     */
    public function hasMapPokemonList()
    {
        return $this->MapPokemon !== null;
    }

    /**
     * Get 'MapPokemon' value
     *
     * @return \Protobuf\Collection<\Protobuf\PokemonGo\ResponseEnvelop\MapPokemonProto>
     */
    public function getMapPokemonList()
    {
        return $this->MapPokemon;
    }

    /**
     * Set 'MapPokemon' value
     *
     * @param \Protobuf\Collection<\Protobuf\PokemonGo\ResponseEnvelop\MapPokemonProto> $value
     */
    public function setMapPokemonList(\Protobuf\Collection $value = null)
    {
        $this->MapPokemon = $value;
    }

    /**
     * Add a new element to 'MapPokemon'
     *
     * @param \Protobuf\PokemonGo\ResponseEnvelop\MapPokemonProto $value
     */
    public function addMapPokemon(\Protobuf\PokemonGo\ResponseEnvelop\MapPokemonProto $value)
    {
        if ($this->MapPokemon === null) {
            $this->MapPokemon = new \Protobuf\MessageCollection();
        }

        $this->MapPokemon->add($value);
    }

    /**
     * Check if 'NearbyPokemon' has a value
     *
     * @return bool
     */
    public function hasNearbyPokemonList()
    {
        return $this->NearbyPokemon !== null;
    }

    /**
     * Get 'NearbyPokemon' value
     *
     * @return \Protobuf\Collection<\Protobuf\PokemonGo\ResponseEnvelop\NearbyPokemonProto>
     */
    public function getNearbyPokemonList()
    {
        return $this->NearbyPokemon;
    }

    /**
     * Set 'NearbyPokemon' value
     *
     * @param \Protobuf\Collection<\Protobuf\PokemonGo\ResponseEnvelop\NearbyPokemonProto> $value
     */
    public function setNearbyPokemonList(\Protobuf\Collection $value = null)
    {
        $this->NearbyPokemon = $value;
    }

    /**
     * Add a new element to 'NearbyPokemon'
     *
     * @param \Protobuf\PokemonGo\ResponseEnvelop\NearbyPokemonProto $value
     */
    public function addNearbyPokemon(\Protobuf\PokemonGo\ResponseEnvelop\NearbyPokemonProto $value)
    {
        if ($this->NearbyPokemon === null) {
            $this->NearbyPokemon = new \Protobuf\MessageCollection();
        }

        $this->NearbyPokemon->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['S2CellId'])) {
            throw new \InvalidArgumentException('Field "S2CellId" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['AsOfTimeMs'])) {
            throw new \InvalidArgumentException('Field "AsOfTimeMs" (tag 2) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'Fort' => [],
            'SpawnPoint' => [],
            'WildPokemon' => [],
            'IsTruncatedList' => null,
            'FortSummary' => [],
            'DecimatedSpawnPoint' => [],
            'MapPokemon' => [],
            'NearbyPokemon' => []
        ], $values);

        $message->setS2CellId($values['S2CellId']);
        $message->setAsOfTimeMs($values['AsOfTimeMs']);
        $message->setIsTruncatedList($values['IsTruncatedList']);

        foreach ($values['Fort'] as $item) {
            $message->addFort($item);
        }

        foreach ($values['SpawnPoint'] as $item) {
            $message->addSpawnPoint($item);
        }

        foreach ($values['WildPokemon'] as $item) {
            $message->addWildPokemon($item);
        }

        foreach ($values['FortSummary'] as $item) {
            $message->addFortSummary($item);
        }

        foreach ($values['DecimatedSpawnPoint'] as $item) {
            $message->addDecimatedSpawnPoint($item);
        }

        foreach ($values['MapPokemon'] as $item) {
            $message->addMapPokemon($item);
        }

        foreach ($values['NearbyPokemon'] as $item) {
            $message->addNearbyPokemon($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'ClientMapCell',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'S2CellId',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'AsOfTimeMs',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'Fort',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.pokemongo.ResponseEnvelop.PokemonFortProto'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'SpawnPoint',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.pokemongo.ResponseEnvelop.ClientSpawnPointProto'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'WildPokemon',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.pokemongo.ResponseEnvelop.WildPokemonProto'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'IsTruncatedList',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 8,
                    'name' => 'FortSummary',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.pokemongo.ResponseEnvelop.PokemonSummaryFortProto'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 9,
                    'name' => 'DecimatedSpawnPoint',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.pokemongo.ResponseEnvelop.ClientSpawnPointProto'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'MapPokemon',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.pokemongo.ResponseEnvelop.MapPokemonProto'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'NearbyPokemon',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.pokemongo.ResponseEnvelop.NearbyPokemonProto'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->S2CellId === null) {
            throw new \UnexpectedValueException('Field "\\Protobuf\\PokemonGo\\ResponseEnvelop\\ClientMapCell#S2CellId" (tag 1) is required but has no value.');
        }

        if ($this->AsOfTimeMs === null) {
            throw new \UnexpectedValueException('Field "\\Protobuf\\PokemonGo\\ResponseEnvelop\\ClientMapCell#AsOfTimeMs" (tag 2) is required but has no value.');
        }

        if ($this->S2CellId !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->S2CellId);
        }

        if ($this->AsOfTimeMs !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeVarint($stream, $this->AsOfTimeMs);
        }

        if ($this->Fort !== null) {
            foreach ($this->Fort as $val) {
                $writer->writeVarint($stream, 26);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->SpawnPoint !== null) {
            foreach ($this->SpawnPoint as $val) {
                $writer->writeVarint($stream, 34);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->WildPokemon !== null) {
            foreach ($this->WildPokemon as $val) {
                $writer->writeVarint($stream, 42);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->IsTruncatedList !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeBool($stream, $this->IsTruncatedList);
        }

        if ($this->FortSummary !== null) {
            foreach ($this->FortSummary as $val) {
                $writer->writeVarint($stream, 66);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->DecimatedSpawnPoint !== null) {
            foreach ($this->DecimatedSpawnPoint as $val) {
                $writer->writeVarint($stream, 74);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->MapPokemon !== null) {
            foreach ($this->MapPokemon as $val) {
                $writer->writeVarint($stream, 82);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->NearbyPokemon !== null) {
            foreach ($this->NearbyPokemon as $val) {
                $writer->writeVarint($stream, 90);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->S2CellId = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 3);

                $this->AsOfTimeMs = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \Protobuf\PokemonGo\ResponseEnvelop\PokemonFortProto();

                if ($this->Fort === null) {
                    $this->Fort = new \Protobuf\MessageCollection();
                }

                $this->Fort->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \Protobuf\PokemonGo\ResponseEnvelop\ClientSpawnPointProto();

                if ($this->SpawnPoint === null) {
                    $this->SpawnPoint = new \Protobuf\MessageCollection();
                }

                $this->SpawnPoint->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \Protobuf\PokemonGo\ResponseEnvelop\WildPokemonProto();

                if ($this->WildPokemon === null) {
                    $this->WildPokemon = new \Protobuf\MessageCollection();
                }

                $this->WildPokemon->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsTruncatedList = $reader->readBool($stream);

                continue;
            }

            if ($tag === 8) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \Protobuf\PokemonGo\ResponseEnvelop\PokemonSummaryFortProto();

                if ($this->FortSummary === null) {
                    $this->FortSummary = new \Protobuf\MessageCollection();
                }

                $this->FortSummary->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 9) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \Protobuf\PokemonGo\ResponseEnvelop\ClientSpawnPointProto();

                if ($this->DecimatedSpawnPoint === null) {
                    $this->DecimatedSpawnPoint = new \Protobuf\MessageCollection();
                }

                $this->DecimatedSpawnPoint->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \Protobuf\PokemonGo\ResponseEnvelop\MapPokemonProto();

                if ($this->MapPokemon === null) {
                    $this->MapPokemon = new \Protobuf\MessageCollection();
                }

                $this->MapPokemon->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \Protobuf\PokemonGo\ResponseEnvelop\NearbyPokemonProto();

                if ($this->NearbyPokemon === null) {
                    $this->NearbyPokemon = new \Protobuf\MessageCollection();
                }

                $this->NearbyPokemon->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->S2CellId !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->S2CellId);
        }

        if ($this->AsOfTimeMs !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->AsOfTimeMs);
        }

        if ($this->Fort !== null) {
            foreach ($this->Fort as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->SpawnPoint !== null) {
            foreach ($this->SpawnPoint as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->WildPokemon !== null) {
            foreach ($this->WildPokemon as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->IsTruncatedList !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->FortSummary !== null) {
            foreach ($this->FortSummary as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->DecimatedSpawnPoint !== null) {
            foreach ($this->DecimatedSpawnPoint as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->MapPokemon !== null) {
            foreach ($this->MapPokemon as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->NearbyPokemon !== null) {
            foreach ($this->NearbyPokemon as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->S2CellId = null;
        $this->AsOfTimeMs = null;
        $this->Fort = null;
        $this->SpawnPoint = null;
        $this->WildPokemon = null;
        $this->IsTruncatedList = null;
        $this->FortSummary = null;
        $this->DecimatedSpawnPoint = null;
        $this->MapPokemon = null;
        $this->NearbyPokemon = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \Protobuf\PokemonGo\ResponseEnvelop\ClientMapCell) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->S2CellId = ($message->S2CellId !== null) ? $message->S2CellId : $this->S2CellId;
        $this->AsOfTimeMs = ($message->AsOfTimeMs !== null) ? $message->AsOfTimeMs : $this->AsOfTimeMs;
        $this->Fort = ($message->Fort !== null) ? $message->Fort : $this->Fort;
        $this->SpawnPoint = ($message->SpawnPoint !== null) ? $message->SpawnPoint : $this->SpawnPoint;
        $this->WildPokemon = ($message->WildPokemon !== null) ? $message->WildPokemon : $this->WildPokemon;
        $this->IsTruncatedList = ($message->IsTruncatedList !== null) ? $message->IsTruncatedList : $this->IsTruncatedList;
        $this->FortSummary = ($message->FortSummary !== null) ? $message->FortSummary : $this->FortSummary;
        $this->DecimatedSpawnPoint = ($message->DecimatedSpawnPoint !== null) ? $message->DecimatedSpawnPoint : $this->DecimatedSpawnPoint;
        $this->MapPokemon = ($message->MapPokemon !== null) ? $message->MapPokemon : $this->MapPokemon;
        $this->NearbyPokemon = ($message->NearbyPokemon !== null) ? $message->NearbyPokemon : $this->NearbyPokemon;
    }


}

